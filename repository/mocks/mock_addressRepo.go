// Code generated by MockGen. DO NOT EDIT.
// Source: repository/addressRepo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "inventory-management/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAddressRepo is a mock of AddressRepo interface.
type MockAddressRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAddressRepoMockRecorder
}

// MockAddressRepoMockRecorder is the mock recorder for MockAddressRepo.
type MockAddressRepoMockRecorder struct {
	mock *MockAddressRepo
}

// NewMockAddressRepo creates a new mock instance.
func NewMockAddressRepo(ctrl *gomock.Controller) *MockAddressRepo {
	mock := &MockAddressRepo{ctrl: ctrl}
	mock.recorder = &MockAddressRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressRepo) EXPECT() *MockAddressRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAddressRepo) Delete(addressId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", addressId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAddressRepoMockRecorder) Delete(addressId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAddressRepo)(nil).Delete), addressId)
}

// Get mocks base method.
func (m *MockAddressRepo) Get(addressId string) (*models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", addressId)
	ret0, _ := ret[0].(*models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAddressRepoMockRecorder) Get(addressId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAddressRepo)(nil).Get), addressId)
}

// Update mocks base method.
func (m *MockAddressRepo) Update(addressId string, address *models.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", addressId, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAddressRepoMockRecorder) Update(addressId, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAddressRepo)(nil).Update), addressId, address)
}

// Upsert mocks base method.
func (m *MockAddressRepo) Upsert(address *models.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockAddressRepoMockRecorder) Upsert(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockAddressRepo)(nil).Upsert), address)
}
