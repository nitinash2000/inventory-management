// Code generated by MockGen. DO NOT EDIT.
// Source: repository/orderItemRepo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "inventory-management/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderItemRepo is a mock of OrderItemRepo interface.
type MockOrderItemRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderItemRepoMockRecorder
}

// MockOrderItemRepoMockRecorder is the mock recorder for MockOrderItemRepo.
type MockOrderItemRepoMockRecorder struct {
	mock *MockOrderItemRepo
}

// NewMockOrderItemRepo creates a new mock instance.
func NewMockOrderItemRepo(ctrl *gomock.Controller) *MockOrderItemRepo {
	mock := &MockOrderItemRepo{ctrl: ctrl}
	mock.recorder = &MockOrderItemRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderItemRepo) EXPECT() *MockOrderItemRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrderItemRepo) Create(orderItem ...*models.OrderItem) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range orderItem {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrderItemRepoMockRecorder) Create(orderItem ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderItemRepo)(nil).Create), orderItem...)
}

// Delete mocks base method.
func (m *MockOrderItemRepo) Delete(orderItemId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", orderItemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrderItemRepoMockRecorder) Delete(orderItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrderItemRepo)(nil).Delete), orderItemId)
}

// DeleteAll mocks base method.
func (m *MockOrderItemRepo) DeleteAll(orderItemIds []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", orderItemIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockOrderItemRepoMockRecorder) DeleteAll(orderItemIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockOrderItemRepo)(nil).DeleteAll), orderItemIds)
}

// Get mocks base method.
func (m *MockOrderItemRepo) Get(orderItemId string) (*models.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", orderItemId)
	ret0, _ := ret[0].(*models.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOrderItemRepoMockRecorder) Get(orderItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrderItemRepo)(nil).Get), orderItemId)
}

// GetByOrder mocks base method.
func (m *MockOrderItemRepo) GetByOrder(orderId string) ([]*models.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOrder", orderId)
	ret0, _ := ret[0].([]*models.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOrder indicates an expected call of GetByOrder.
func (mr *MockOrderItemRepoMockRecorder) GetByOrder(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOrder", reflect.TypeOf((*MockOrderItemRepo)(nil).GetByOrder), orderId)
}

// Update mocks base method.
func (m *MockOrderItemRepo) Update(orderItemId string, orderItem *models.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", orderItemId, orderItem)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrderItemRepoMockRecorder) Update(orderItemId, orderItem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrderItemRepo)(nil).Update), orderItemId, orderItem)
}

// Upsert mocks base method.
func (m *MockOrderItemRepo) Upsert(orderItems ...*models.OrderItem) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range orderItems {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upsert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockOrderItemRepoMockRecorder) Upsert(orderItems ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockOrderItemRepo)(nil).Upsert), orderItems...)
}
