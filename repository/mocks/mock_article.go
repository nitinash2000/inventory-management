// Code generated by MockGen. DO NOT EDIT.
// Source: repository/article.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "inventory-management/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArticleRepo is a mock of ArticleRepo interface.
type MockArticleRepo struct {
	ctrl     *gomock.Controller
	recorder *MockArticleRepoMockRecorder
}

// MockArticleRepoMockRecorder is the mock recorder for MockArticleRepo.
type MockArticleRepoMockRecorder struct {
	mock *MockArticleRepo
}

// NewMockArticleRepo creates a new mock instance.
func NewMockArticleRepo(ctrl *gomock.Controller) *MockArticleRepo {
	mock := &MockArticleRepo{ctrl: ctrl}
	mock.recorder = &MockArticleRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleRepo) EXPECT() *MockArticleRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockArticleRepo) Create(article *models.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", article)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockArticleRepoMockRecorder) Create(article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockArticleRepo)(nil).Create), article)
}

// Delele mocks base method.
func (m *MockArticleRepo) Delele(articleId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delele", articleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delele indicates an expected call of Delele.
func (mr *MockArticleRepoMockRecorder) Delele(articleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delele", reflect.TypeOf((*MockArticleRepo)(nil).Delele), articleId)
}

// Get mocks base method.
func (m *MockArticleRepo) Get(articleId string) (*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", articleId)
	ret0, _ := ret[0].(*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockArticleRepoMockRecorder) Get(articleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArticleRepo)(nil).Get), articleId)
}

// GetAll mocks base method.
func (m *MockArticleRepo) GetAll() ([]*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockArticleRepoMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockArticleRepo)(nil).GetAll))
}

// Update mocks base method.
func (m *MockArticleRepo) Update(articleId string, article *models.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", articleId, article)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockArticleRepoMockRecorder) Update(articleId, article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockArticleRepo)(nil).Update), articleId, article)
}

// UpdateArticleStock mocks base method.
func (m *MockArticleRepo) UpdateArticleStock(articleId string, stock int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleStock", articleId, stock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArticleStock indicates an expected call of UpdateArticleStock.
func (mr *MockArticleRepoMockRecorder) UpdateArticleStock(articleId, stock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleStock", reflect.TypeOf((*MockArticleRepo)(nil).UpdateArticleStock), articleId, stock)
}
