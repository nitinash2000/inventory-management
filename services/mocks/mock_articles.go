// Code generated by MockGen. DO NOT EDIT.
// Source: services/articles/articles.go

// Package mocks is a generated GoMock package.
package mocks

import (
	dtos "inventory-management/dtos"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIArticleService is a mock of IArticleService interface.
type MockIArticleService struct {
	ctrl     *gomock.Controller
	recorder *MockIArticleServiceMockRecorder
}

// MockIArticleServiceMockRecorder is the mock recorder for MockIArticleService.
type MockIArticleServiceMockRecorder struct {
	mock *MockIArticleService
}

// NewMockIArticleService creates a new mock instance.
func NewMockIArticleService(ctrl *gomock.Controller) *MockIArticleService {
	mock := &MockIArticleService{ctrl: ctrl}
	mock.recorder = &MockIArticleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIArticleService) EXPECT() *MockIArticleServiceMockRecorder {
	return m.recorder
}

// CreateArticle mocks base method.
func (m *MockIArticleService) CreateArticle(req *dtos.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockIArticleServiceMockRecorder) CreateArticle(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockIArticleService)(nil).CreateArticle), req)
}

// DeleleArticle mocks base method.
func (m *MockIArticleService) DeleleArticle(articleId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleleArticle", articleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleleArticle indicates an expected call of DeleleArticle.
func (mr *MockIArticleServiceMockRecorder) DeleleArticle(articleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleleArticle", reflect.TypeOf((*MockIArticleService)(nil).DeleleArticle), articleId)
}

// GetArticle mocks base method.
func (m *MockIArticleService) GetArticle(articleId string) (*dtos.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", articleId)
	ret0, _ := ret[0].(*dtos.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockIArticleServiceMockRecorder) GetArticle(articleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockIArticleService)(nil).GetArticle), articleId)
}

// ListArticle mocks base method.
func (m *MockIArticleService) ListArticle() ([]*dtos.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticle")
	ret0, _ := ret[0].([]*dtos.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticle indicates an expected call of ListArticle.
func (mr *MockIArticleServiceMockRecorder) ListArticle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticle", reflect.TypeOf((*MockIArticleService)(nil).ListArticle))
}

// UpdateArticle mocks base method.
func (m *MockIArticleService) UpdateArticle(id string, req *dtos.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticle", id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArticle indicates an expected call of UpdateArticle.
func (mr *MockIArticleServiceMockRecorder) UpdateArticle(id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticle", reflect.TypeOf((*MockIArticleService)(nil).UpdateArticle), id, req)
}

// UpdateArticleStock mocks base method.
func (m *MockIArticleService) UpdateArticleStock(articleId string, req *dtos.UpdateStock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleStock", articleId, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArticleStock indicates an expected call of UpdateArticleStock.
func (mr *MockIArticleServiceMockRecorder) UpdateArticleStock(articleId, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleStock", reflect.TypeOf((*MockIArticleService)(nil).UpdateArticleStock), articleId, req)
}
