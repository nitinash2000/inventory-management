// Code generated by MockGen. DO NOT EDIT.
// Source: services/articles/articleService.go

// Package mocks is a generated GoMock package.
package mocks

import (
	dtos "inventory-management/dtos"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockArticleService is a mock of ArticleService interface.
type MockArticleService struct {
	ctrl     *gomock.Controller
	recorder *MockArticleServiceMockRecorder
}

// MockArticleServiceMockRecorder is the mock recorder for MockArticleService.
type MockArticleServiceMockRecorder struct {
	mock *MockArticleService
}

// NewMockArticleService creates a new mock instance.
func NewMockArticleService(ctrl *gomock.Controller) *MockArticleService {
	mock := &MockArticleService{ctrl: ctrl}
	mock.recorder = &MockArticleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArticleService) EXPECT() *MockArticleServiceMockRecorder {
	return m.recorder
}

// CreateArticle mocks base method.
func (m *MockArticleService) CreateArticle(req *dtos.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockArticleServiceMockRecorder) CreateArticle(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockArticleService)(nil).CreateArticle), req)
}

// DeleteArticle mocks base method.
func (m *MockArticleService) DeleteArticle(articleId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteArticle", articleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteArticle indicates an expected call of DeleteArticle.
func (mr *MockArticleServiceMockRecorder) DeleteArticle(articleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArticle", reflect.TypeOf((*MockArticleService)(nil).DeleteArticle), articleId)
}

// GetArticle mocks base method.
func (m *MockArticleService) GetArticle(articleId string) (*dtos.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", articleId)
	ret0, _ := ret[0].(*dtos.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockArticleServiceMockRecorder) GetArticle(articleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockArticleService)(nil).GetArticle), articleId)
}

// ListArticle mocks base method.
func (m *MockArticleService) ListArticle() ([]*dtos.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListArticle")
	ret0, _ := ret[0].([]*dtos.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListArticle indicates an expected call of ListArticle.
func (mr *MockArticleServiceMockRecorder) ListArticle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListArticle", reflect.TypeOf((*MockArticleService)(nil).ListArticle))
}

// UpdateArticle mocks base method.
func (m *MockArticleService) UpdateArticle(id string, req *dtos.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticle", id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArticle indicates an expected call of UpdateArticle.
func (mr *MockArticleServiceMockRecorder) UpdateArticle(id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticle", reflect.TypeOf((*MockArticleService)(nil).UpdateArticle), id, req)
}

// UpdateArticleStock mocks base method.
func (m *MockArticleService) UpdateArticleStock(articleId string, req *dtos.UpdateStock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArticleStock", articleId, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArticleStock indicates an expected call of UpdateArticleStock.
func (mr *MockArticleServiceMockRecorder) UpdateArticleStock(articleId, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArticleStock", reflect.TypeOf((*MockArticleService)(nil).UpdateArticleStock), articleId, req)
}
